apiVersion: batch/v1
kind: CronJob
metadata:
  name: pg-backup-cronjob
  namespace: {{ .Values.postgresql.metadata.name }}
spec:
  schedule: "0 2 * * *"  # Her gün saat 2'de çalışır
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: pg-backup
            image: "{{ .Values.postgresql.image.repository }}:{{ .Values.postgresql.image.tag }}"
            env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgresql.secret.name }}
                  key: {{ .Values.postgresql.secret.postgresqlpassword.key }}
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgresql.secret.name }}
                  key: {{ .Values.postgresql.secret.postgresqluser.key }}
            - name: POSTGRES_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgresql.secret.name }}
                  key: {{ .Values.postgresql.secret.postgresqlhost.key }}
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgresql.secret.name }}
                  key: {{ .Values.postgresql.secret.postgresqldb.key }}
            command: ["/bin/sh", "-c"]
            args:
              - |
                # Yedekleme dizinini oluşturuyoruz
                mkdir -p /backup
                # 7 günden eski dosyaları siliyoruz
                find /backup -type f -name "*.sql" -mtime +7 -exec rm {} \;
                # Yeni yedek dosyasını oluşturuyoruz
                pg_dump -U $POSTGRES_USER -h $POSTGRES_HOST -d $POSTGRES_DB -F c -f /backup/$POSTGRES_DB_$(date +\%Y-\%m-\%d_\%H:\%M:\%S).sql;
            volumeMounts:
            - name: backup-volume
              mountPath: /backup
          restartPolicy: OnFailure
          volumes:
          - name: backup-volume
            persistentVolumeClaim:
              claimName: backup-pvc
